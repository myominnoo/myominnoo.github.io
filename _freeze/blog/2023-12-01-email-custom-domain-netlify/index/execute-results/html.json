{
  "hash": "439a3be02c03c188deab74fd30396f59",
  "result": {
    "markdown": "---\ntitle: \"Creating Equiplot in R\"\nsubtitle: \"R version of Equiplot.ado by Int'l Center for Equity in Health | Pelotas\"\nauthor: \"Myo Minn Oo\"\ndate: 2023-06-30\ndate-modified: last-modified\ndate-format: long\ncategories: \n  - R\n  - Health Equity\ncode-fold: true\ncode-tools: true\ncode-link: true\ncode-line-numbers: true\npage-layout: article\nimage: featured.png\n---\n\n\nThis short code snippet demonstrates the process of creating an equiplot for visualizing health equity. Here's a summary and step-by-step description of what the code does:\n\nYou need **`tidyverse`**, **`haven`**, and **`glue`** packages to run this session. To install them, run the following code in your R console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"tidyverse\", \"haven\", \"glue\", \"ggprism\"))\n```\n:::\n\n\n## Getting data\n\nNext, we will do the following to get the data into R.\n\n1.  Load the necessary packages: **`tidyverse`**. For **`haven`** and **`glue`**, we will not load them but use this, **`package::function()`**.\n\n2.  Create a temporary directory to store the downloaded zip file.\n\n3.  Download the zip file from the Equidade website.\n\n4.  Extract the contents of the downloaded zip file.\n\n5.  Read the extracted data file, \"example_dataset_structure.dta\", into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# create a temporary file to save zipped file\ntemp <- tempdir()\nzip_file <- here::here(temp, \"equiplot-guide.zip\")\n\n# download zip file from equidade website\ndownload.file(url = \"https://www.equidade.org/files/equiplot-guide.zip\", \n\t\t\t\t\t\t\tdestfile = zip_file)\n\n# import data\nraw <- unz(description = zip_file, filename = \"example_dataset_structure.dta\") |> \n\thaven::read_dta()\n```\n:::\n\n\nLet's check the data.\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> country </th>\n   <th style=\"text-align:right;\"> year </th>\n   <th style=\"text-align:left;\"> source </th>\n   <th style=\"text-align:right;\"> rQ1 </th>\n   <th style=\"text-align:right;\"> rQ2 </th>\n   <th style=\"text-align:right;\"> rQ3 </th>\n   <th style=\"text-align:right;\"> rQ4 </th>\n   <th style=\"text-align:right;\"> rQ5 </th>\n   <th style=\"text-align:right;\"> sii </th>\n   <th style=\"text-align:right;\"> countryn </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Bolivia </td>\n   <td style=\"text-align:right;\"> 1994 </td>\n   <td style=\"text-align:left;\"> DHS </td>\n   <td style=\"text-align:right;\"> 1.22636 </td>\n   <td style=\"text-align:right;\"> 4.83719 </td>\n   <td style=\"text-align:right;\"> 11.88177 </td>\n   <td style=\"text-align:right;\"> 12.71847 </td>\n   <td style=\"text-align:right;\"> 9.88325 </td>\n   <td style=\"text-align:right;\"> 14.4 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Bolivia </td>\n   <td style=\"text-align:right;\"> 2003 </td>\n   <td style=\"text-align:left;\"> DHS </td>\n   <td style=\"text-align:right;\"> 5.91252 </td>\n   <td style=\"text-align:right;\"> 12.20895 </td>\n   <td style=\"text-align:right;\"> 16.38398 </td>\n   <td style=\"text-align:right;\"> 19.08344 </td>\n   <td style=\"text-align:right;\"> 17.54643 </td>\n   <td style=\"text-align:right;\"> 9.4 </td>\n   <td style=\"text-align:right;\"> 2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Brazil </td>\n   <td style=\"text-align:right;\"> 1996 </td>\n   <td style=\"text-align:left;\"> DHS </td>\n   <td style=\"text-align:right;\"> 5.68750 </td>\n   <td style=\"text-align:right;\"> 10.30164 </td>\n   <td style=\"text-align:right;\"> 11.48771 </td>\n   <td style=\"text-align:right;\"> 12.43650 </td>\n   <td style=\"text-align:right;\"> 10.01661 </td>\n   <td style=\"text-align:right;\"> 6.2 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Brazil </td>\n   <td style=\"text-align:right;\"> 2006 </td>\n   <td style=\"text-align:left;\"> DHS </td>\n   <td style=\"text-align:right;\"> 14.74925 </td>\n   <td style=\"text-align:right;\"> 17.41648 </td>\n   <td style=\"text-align:right;\"> 17.58095 </td>\n   <td style=\"text-align:right;\"> 19.09717 </td>\n   <td style=\"text-align:right;\"> 12.96915 </td>\n   <td style=\"text-align:right;\"> -4.3 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Colombia </td>\n   <td style=\"text-align:right;\"> 1995 </td>\n   <td style=\"text-align:left;\"> DHS </td>\n   <td style=\"text-align:right;\"> 6.82985 </td>\n   <td style=\"text-align:right;\"> 12.25396 </td>\n   <td style=\"text-align:right;\"> 8.66815 </td>\n   <td style=\"text-align:right;\"> 7.98813 </td>\n   <td style=\"text-align:right;\"> 11.02944 </td>\n   <td style=\"text-align:right;\"> 1.6 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Colombia </td>\n   <td style=\"text-align:right;\"> 2005 </td>\n   <td style=\"text-align:left;\"> DHS </td>\n   <td style=\"text-align:right;\"> 9.66284 </td>\n   <td style=\"text-align:right;\"> 11.34591 </td>\n   <td style=\"text-align:right;\"> 12.16200 </td>\n   <td style=\"text-align:right;\"> 12.51274 </td>\n   <td style=\"text-align:right;\"> 11.31543 </td>\n   <td style=\"text-align:right;\"> -3.4 </td>\n   <td style=\"text-align:right;\"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Haiti </td>\n   <td style=\"text-align:right;\"> 1994 </td>\n   <td style=\"text-align:left;\"> DHS </td>\n   <td style=\"text-align:right;\"> 1.12229 </td>\n   <td style=\"text-align:right;\"> 0.57025 </td>\n   <td style=\"text-align:right;\"> 0.61240 </td>\n   <td style=\"text-align:right;\"> 2.09852 </td>\n   <td style=\"text-align:right;\"> 10.52705 </td>\n   <td style=\"text-align:right;\"> 11.3 </td>\n   <td style=\"text-align:right;\"> 7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Haiti </td>\n   <td style=\"text-align:right;\"> 2005 </td>\n   <td style=\"text-align:left;\"> DHS </td>\n   <td style=\"text-align:right;\"> 0.69455 </td>\n   <td style=\"text-align:right;\"> 1.81220 </td>\n   <td style=\"text-align:right;\"> 2.97682 </td>\n   <td style=\"text-align:right;\"> 7.12898 </td>\n   <td style=\"text-align:right;\"> 12.97554 </td>\n   <td style=\"text-align:right;\"> 19.5 </td>\n   <td style=\"text-align:right;\"> 8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Peru </td>\n   <td style=\"text-align:right;\"> 1996 </td>\n   <td style=\"text-align:left;\"> DHS </td>\n   <td style=\"text-align:right;\"> 3.04027 </td>\n   <td style=\"text-align:right;\"> 7.29176 </td>\n   <td style=\"text-align:right;\"> 11.33096 </td>\n   <td style=\"text-align:right;\"> 13.07306 </td>\n   <td style=\"text-align:right;\"> 15.77069 </td>\n   <td style=\"text-align:right;\"> 15.5 </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Peru </td>\n   <td style=\"text-align:right;\"> 2004 </td>\n   <td style=\"text-align:left;\"> DHS </td>\n   <td style=\"text-align:right;\"> 3.35353 </td>\n   <td style=\"text-align:right;\"> 9.16911 </td>\n   <td style=\"text-align:right;\"> 16.07169 </td>\n   <td style=\"text-align:right;\"> 17.62576 </td>\n   <td style=\"text-align:right;\"> 15.82903 </td>\n   <td style=\"text-align:right;\"> 10.8 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### Reshaping data from wide to long format\n\nLet's change the data format so that it is much easier to create plots in ggplot2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nex <- \n\traw |> \n\tpivot_longer(cols = rQ1:rQ5, names_to = \"level\", values_to = \"coverage\") |> \n\tmutate(\n\t\tlevel = str_remove(level, \"r\"), \n\t\tlevel = case_when(\n\t\t\tlevel == \"Q1\" ~ \"Q1 (Poorest)\", \n\t\t\tlevel == \"Q5\" ~ \"Q5 (Richest)\", \n\t\t\tTRUE ~ level\n\t\t)\n\t)\n```\n:::\n\n\nIn the provided code above, the data frame \"raw\" is being processed using the pipe operator (**`|>`**).\n\nFirst, the code uses the **`pivot_longer()`** function from the \"tidyr\" package to reshape the data. The columns \"rQ1\" to \"rQ5\" are transformed into two new columns: \"level\" and \"coverage\". The values in the original columns are gathered into the \"coverage\" column, and the column names are extracted and placed in the \"level\" column.\n\nNext, the code uses the **`mutate()`** function from the \"dplyr\" package to modify the \"level\" column. The **`str_remove()`** function from the \"stringr\" package removes the letter \"r\" from the beginning of each level. The **`case_when()`** function is then used to assign new labels to the levels based on specific conditions. For example, if the level is \"Q1\", it is renamed to \"Q1 (Poorest)\". Similarly, if the level is \"Q5\", it is renamed to \"Q5 (Richest)\". If none of the conditions match, the original level value is retained.\n\nThe resulting data frame \"ex\" now has the \"level\" column modified with new labels, representing different quantiles of coverage.\n\n### How pipe \\|\\> works\n\nImagine you have a set of instructions that you need to follow in a specific order. The pipe **`|>`** symbol is like a magic wand that helps you pass the results from one instruction to the next, without having to write everything down again.\n\nFor example, let's say you have a toy car and you want to make it go faster. You have different steps to follow: first, you need to attach a turbo engine, then add bigger wheels, and finally, give it a fresh coat of paint.\n\nUsing the magic wand, you can say \"Take the car and attach a turbo engine\" (car \\|\\> attach_turbo_engine), then you can say \"Take the result from the previous step and add bigger wheels\" (previous_result \\|\\> add_bigger_wheels), and finally, you can say \"Take the result from the previous step and give it a fresh coat of paint\" (previous_result \\|\\> give_fresh_coat_of_paint).\n\nThe magic wand (**`|>`**) helps you pass the car from one step to the next, making it faster and more exciting without repeating the same instructions every time.\n\nIn programming, the pipe symbol works similarly. It allows you to take the output of one operation and pass it directly as input to the next operation, simplifying the code and making it easier to understand and follow the flow of data.\n\n## Equiplot\n\nWe will filter the data points for the year **`1994`** and create our boilerplate for equiplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nex |> \n\tfilter(year == 1994) |>\n\t# ggplot boilerplate defining x and y axis\n\tggplot(aes(x = coverage, y = country)) +\n\t# create circles \n\tgeom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=768}\n:::\n:::\n\n\nThis looks very rough.\n\nNext, we will add more aesthetics to it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nex |> \n\tfilter(year == 1994) |> \n\tggplot(aes(x = coverage, y = country)) +\n\t# add line to connect values in each country\n\tgeom_line(\n\t\taes(group = country) \n\t) + \n\t# create circles with colors based on wealth level\n\tgeom_point(\n\t\taes(color = level), \n\t\tsize = 7\n\t) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=768}\n:::\n:::\n\n\nWe want to make the plot more visually appealing so adding more looks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- \n\tex |> \n\tfilter(year == 1994) |> \n\tggplot(aes(x = coverage, y = country)) +\n\tgeom_line(\n\t\taes(group = country) \n\t) + \n\tgeom_point(\n\t\taes(color = level), \n\t\tsize = 7\n\t) +\n\t# limit x axis' min & max values\n\t# make the axis label look good\n\tscale_x_continuous(\n\t\tlimits = c(0, 15), \n\t\tlabels = \\(x) paste0(x, \"%\")\n\t) +\n\t# add more descriptive labels\n\tlabs(\n\t\tx = \"Coverage (%)\", \n\t\ty = NULL, \n\t\tcolor = \"Wealth Quintiles\", \n\t\tcaption = \"Data source: Int'l Center for Equity in Health | Pelotas\"\n\t) +\n\t## add title\n\tggtitle(\"Equiplot of XX coverage in 1994\") +\n\t# change the appearance of the whole graph\n\tggprism::theme_prism(base_size = 10) + \n\ttheme(\n\t\t# add horizontal grey line\n\t\tpanel.grid.major.y = element_line(color = \"grey90\"), \n\t\t# italicize plot caption\n\t\tplot.caption = element_text(face = \"italic\"), \n\t\t# show legend title \n\t\tlegend.title = element_text(), \n\t\t# change legend to the top position\n\t\tlegend.position = \"top\"\n\t)\np \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=768}\n:::\n:::\n\n\nRefining more. change to custom colors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + \n\tscale_color_viridis_d() # colors good for viewers with common forms of color blindness\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np <- \n\tp +\n\t# change the color scale to custom colors\n\tscale_color_manual(\n\t\tvalues = c(\"#15353b\", \"#005766\", \"#46929e\", \"#ffdb83\", \"#ffb403\")\n\t) + \n\t# put legend title to the top over the labels\n\tguides(color = guide_legend(title.position = \"top\"))  \np \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=768}\n:::\n:::\n\n\n### Complete code\n\nHere is the complete code snippet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nex |> \n\tfilter(year == 1994) |> \n\tggplot(aes(x = coverage, y = country)) +\n\tgeom_line(\n\t\taes(group = country) \n\t) + \n\tgeom_point(\n\t\taes(color = level), \n\t\tsize = 7\n\t) +\n\t# limit x axis' min & max values\n\t# make the axis label look good\n\tscale_x_continuous(\n\t\tlimits = c(0, 15), \n\t\tlabels = \\(x) paste0(x, \"%\")\n\t) +\n\t# change the color scale to custom colors\n\tscale_color_manual(\n\t\tvalues = c(\"#15353b\", \"#005766\", \"#46929e\", \"#ffdb83\", \"#ffb403\")\n\t) + \n\t# put legend title to the top over the labels\n\tguides(color = guide_legend(title.position = \"top\")) +\n\t# add more descriptive labels\n\tlabs(\n\t\tx = \"Coverage (%)\", \n\t\ty = NULL, \n\t\tcolor = \"Wealth Quintiles\", \n\t\tcaption = \"Data source: Int'l Center for Equity in Health | Pelotas\"\n\t) +\n\t## add title\n\tggtitle(\"Equiplot of XX coverage in 1994\") +\n\t# change the appearance of the whole graph\n\tggprism::theme_prism(base_size = 10) + \n\ttheme(\n\t\t# add horizontal grey line\n\t\tpanel.grid.major.y = element_line(color = \"grey90\"), \n\t\t# italicize plot caption \n\t\tplot.caption = element_text(face = \"italic\"), \n\t\t# show legend title \n\t\tlegend.title = element_text(), \n\t\t# change legend to the top position\n\t\tlegend.position = \"top\"\n\t) \n```\n:::\n\n\n### Reusable function\n\nWriting the same code repeatedly is not efficient. To avoid this, let's create a function that allows us to reuse the boilerplate code as much as we need. This will help us save time and effort. We can modify the code snippet according to our requirements and then encapsulate it within a function. By doing so, we can easily reuse the code with different datasets or variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_equiplot <- function(\n\t\tdata, x, y, color,\n\t\txlab = \"Coverage (%)\", \n\t\tylab = NULL, \n\t\ttitle = \"Equiplot of XX coverage in 1994\",\n\t\tcaption = \"Data source: Int'l Center for Equity in Health | Pelotas\",\n\t\tlegend.title = \"Wealth Quintiles\", \n\t\tcolor_pal = c(\"#15353b\", \"#005766\", \"#46929e\", \"#ffdb83\", \"#ffb403\")) {\n\tdata |> \n\tmutate(x = {{ x }}, \n\t\t\t\t y = {{ y }}, \n\t\t\t\t color = {{ color }}) |> \n\tggplot(aes(x = x, y = y)) +\n\tgeom_line(\n\t\taes(group = y) \n\t) + \n\tgeom_point(\n\t\taes(color = color), \n\t\tsize = 7\n\t) +\n\t# change the color scale to custom colors\n\tscale_color_manual(\n\t\tvalues = color_pal\n\t) + \n\t# put legend title to the top over the labels\n\tguides(color = guide_legend(title.position = \"top\")) +\n\t# add more descriptive labels\n\tlabs(\n\t\tx = xlab, \n\t\ty = ylab, \n\t\tcolor = legend.title, \n\t\tcaption = caption\n\t) +\n\tggtitle(title) + \n\t# change the appearance of the whole graph\n\tggprism::theme_prism(base_size = 10) + \n\ttheme(\n\t\t# add horizontal grey line\n\t\tpanel.grid.major.y = element_line(color = \"grey90\"), \n\t\t# italicize plot caption \n\t\tplot.caption = element_text(face = \"italic\"), \n\t\t# show legend title \n\t\tlegend.title = element_text(), \n\t\t# change legend to the top position\n\t\tlegend.position = \"top\"\n\t) \n}\n```\n:::\n\n\nLet's create the same plot for the year **`1994`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nex |> \n\tfilter(year == 1994) |> \n\tcreate_equiplot(x = coverage, y = country, color = level, \n\t\t\t\t\t\t\t\t\ttitle = \"Equiplot showing XX coverage in 1994\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=768}\n:::\n:::\n\n\nAdding faceted components based on the year variable can provide additional insights in our visualizations. Here are the updated codes that include faceting:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nex |> \n\tcreate_equiplot(x = coverage, y = country, color = level, \n\t\t\t\t\t\t\t\t\ttitle = \"Equiplot showing XX coverages: 1994-2006\") +\n\t# stratified by year \n\tfacet_wrap(~ year)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=768}\n:::\n:::\n\n\nWe can customize the theme and labels to improve the appearance and clarity of the faceted graph. Here's an updated version of the code snippet with a different theme and modified labels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nex |> \n\tcreate_equiplot(x = coverage, y = country, color = level) +\n\tfacet_wrap(~ year) + \n\ttheme_classic() +\n\ttheme(\n\t\tpanel.grid.major.y = element_line(color = \"grey90\"), \n\t\taxis.text = element_text(face = \"bold\"), \n\t\taxis.title = element_text(face = \"bold\"), \n\t\tplot.title = element_text(face = \"bold\", size = 16), \n\t\tplot.caption = element_text(face = \"italic\"), \n\t\tlegend.title = element_text(face = \"bold\"), \n\t\tlegend.position = \"top\"\n\t) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=768}\n:::\n:::\n\n\n### Saving plots\n\n**`ggsave()`** is a useful function in the ggplot2 package that allows you to save plots in various formats. Here's an example code snippet demonstrating the usage of **`ggsave()`**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(here::here(\"plots\", \"equiplot.png\"), width = 8, height = 6)\n```\n:::\n\n\n## Credits\n\nThank you, [Fernando C Wehrmeister](https://www.countdown2030.org/staff/fernando-c-wehrmeister) & [Andrea Blanchard](https://www.countdown2030.org/staff/dr-andrea-blanchard), for introducing me to the field of health equity and for facilitating the interactive and thought-provoking health equity workshop at the University of Manitoba on 27-30 July 2023.\n\nFeatured photo: **Equity Dashboard** by [Int'l Center for Equity in Health \\| Pelotas](https://equidade.org/dashboard)\n\nExample data & color scheme: **Equiplot** by [Int'l Center for Equity in Health \\| Pelotas](https://equidade.org/equiplot)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}